@inject ICarritoServicio carritoServicio
@implements IDisposable 

@inject SweetAlertService Swal;
@inject NavigationManager _navigationManager;
@using Ecommerce.WebAssembly.Extensiones;
@using Microsoft.AspNetCore.Components.Authorization;
@using System.Security.Claims;
@inject AuthenticationStateProvider autenticacionProvider;

<nav class="navbar navbar-expand-lg navbar-light bg-light">
    <div class="container">
        <a class="navbar-brand" runat="server" href="#">Ecommerce Demo</a>
        <button type="button" class="navbar-toggler" data-bs-toggle="collapse" data-bs-target=".navbar-collapse" title="Alternar navegación" aria-controls="navbarSupportedContent"
                aria-expanded="false" aria-label="Toggle navigation" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="@NavMenuCssClass navbar-collapse">
            <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                <AuthorizeView Roles="Administrador">
                    <li class="nav-item" b-test><NavLink class="nav-link" href="dashboard">Dashboard</NavLink></li>
                    <li class="nav-item"><NavLink class="nav-link" href="usuarios">Usuarios</NavLink></li>
                    <li class="nav-item"><NavLink class="nav-link" href="categorias">Categorias</NavLink></li>
                    <li class="nav-item"><NavLink class="nav-link" href="productos">Productos</NavLink></li>
                </AuthorizeView>
                <li class="nav-item"><NavLink class="nav-link" href="catalogo">Tienda</NavLink></li>
            </ul>

            <AuthorizeView>
                <Authorized>
                    <span class="navbar-text">
                        @context.User.Claims.Where(c => c.Type == ClaimTypes.Email).Select(c => c.Value).SingleOrDefault()
                    </span>
                </Authorized>
            </AuthorizeView>

            <div class="navbar-nav ms-auto">
                <!-- Mostrar estos botones en ambas versiones -->
                <a class="btn btn-outline-dark" href="/cart">
                    <i class="bi-cart-fill me-1"></i>
                    Cart
                    <span class="badge bg-dark text-white ms-1 rounded-pill">@mostrarCantidadCarrito()</span>
                </a>

                <AuthorizeView>
                    <Authorized>
                        <button class="btn btn-outline-dark" type="button" @onclick="CerrarSesion">Salir</button>
                    </Authorized>
                    <NotAuthorized>
                        <a class="btn btn-outline-dark" href="/login">Iniciar sesión</a>
                    </NotAuthorized>
                </AuthorizeView>
                <!-- Fin de botones para ambas versiones -->
            </div>
        </div>
    </div>
</nav>



@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override void OnInitialized()
    {
        carritoServicio.MostrarItems += StateHasChanged;
    }

    public void Dispose()
    {
        carritoServicio.MostrarItems -= StateHasChanged;
    }

    private int mostrarCantidadCarrito()
    {
        return carritoServicio.CantidadProductos();
    }
    private async Task CerrarSesion()
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Desea salir?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Si",
                CancelButtonText = "No",

            });

        if (result.IsConfirmed)
        {
            var autenticacionExt = (AutenticacionExtension)autenticacionProvider;
            await autenticacionExt.ActualizarEstadoAutenticacion(null);
            _navigationManager.NavigateTo("/", true);
        }
    }
}
